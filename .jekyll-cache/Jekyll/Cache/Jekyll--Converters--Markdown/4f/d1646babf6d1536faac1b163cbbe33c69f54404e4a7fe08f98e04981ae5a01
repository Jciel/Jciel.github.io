I"[S<p><br /></p>

<p>Já trabalhei um tempo com um sistema onde era preciso criar web crawlers para capturar algumas informações de sites 
da web, recentemente comecei a brincar um pouco com um componente do framework Symfony chamado DomCrawler, este 
componente é basicamente um parser de HTML que facilita a manipulação do DOM de uma página web possibilitando a captura 
de dados da página de forma fácil e simples.</p>

<p><img src="https://cdn-images-1.medium.com/max/2000/1*oT0-Tqda8sGMdKH0SHPbOw.jpeg" alt="" /></p>
<div class="img-legend">Nate Grant em Unsplash</div>

<p><br /></p>

<h4 id="dom-crawler-what-the-fu-is-this"><strong>DOM… Crawler… What the fu** is this?</strong></h4>
<p>De maneira simples vamos entender primeiramente estes conceitos.<br />
O código HTML de uma página é formado por tags que formam uma estrutura de árvore com uma dentro de outras e assim 
por diante, o DOM (Document Object Model) fornece uma representação estruturada no formato de uma árvore do documento 
HTML para o browser contendo os nós, que seriam as tags html e cada nó possuindo suas propriedades.</p>

<div class="img-container">
    <img src="https://upload.wikimedia.org/wikipedia/commons/8/8b/Simpe_HTML_page_DOM.svg" />  
</div>

<div class="img-legend">Wikipedia</div>

<p><br /></p>

<p>Um Crawler, Web Crawler ou também conhecido como Spider é um mecanismo automatizado que possui a capacidade de navegar 
entre sites e fazer a “leitura” destas páginas para captura de informações ou outras tarefas necessárias, é a base de 
muitas ferramentas de buscas hoje em dia como, por exemplo o Google, onde uma das tarefas é indexar os links dos sites 
em seu banco de dados. Existem diversos objetivos para criar um web crawler como para analisar os links e verificar se 
estão ativos ou não, para análise de dados, ou também para um trabalho da faculdade onde eu fiz a captura de informações 
para treinar um algoritmo de classificação de textos.  :P</p>

<div id="ref-post">
    <a href="/2018/Clojure-Classificacao-de-comentarios-com-machine-learning/">
        <img src="https://cdn-images-1.medium.com/max/1371/1*6h-IqXpvLbQemIRedaCrMg.png" />
        <div id="link-title">
            Clojure Classificacao de comentarios com machine learning
        </div>
        <div id="link-description">
            Classificação de textos consiste em associar cada texto a uma determinada classe 
            baseada em seu conteúdo, por exemplo, podemos associar um comentário 
            sobre um produto...
        </div>
    </a>
</div>
<p><br />
também é possível capturar informações de arquivos de textos, PDFs, etc.</p>

<p><br /></p>

<h4 id="domcrawler"><strong>DomCrawler</strong></h4>
<p>O DomCrawler é um componente do Framework Symfony que facilita a navegação no DOM de documentos HTML e XML, ele fornece 
alguns métodos para manipulação destes documentos e captura de informações, iremos utilizá-lo para criar nosso web 
crawler. Por trás dos panos este componente utiliza a classe DOMElement do PHP para criar os nós do DOM para podermos 
navegar entre eles.</p>

<h4 id="guzzle"><strong>Guzzle</strong></h4>
<p>Outra ferramenta que utilizaremos será o Guzzle, responsável por criar e manipular as requests e responses para links 
que queremos capturar as informações.</p>

<p><br /></p>

<h4 id="lets-code"><strong>Let’s Code</strong></h4>

<p>Primeiramente dentro do diretório onde irá ficar nosso web crawler vamos iniciar o composer.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer init
</code></pre></div></div>

<p>Irei apenas dar enter em todas as opções que o composer solicitar deixando todas com o valor default, após isto iremos 
instalar as ferramentas necessárias, o Guzzle, DomCrawler e Css Selector. O Css Selector utilizaremos junto com o 
DomCrawler.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>composer require guzzlehttp/guzzle
composer require symfony/dom-crawler
composer require symfony/css-selector
</code></pre></div></div>

<p>Após a terminada a instalação vamos criar o arquivo do web crawler chamado <code class="language-plaintext highlighter-rouge">webcrawler.php</code> na raiz do projeto, não irei 
utilizar nenhuma estrutura mais complexa aqui, criarei tudo no mesmo arquivo visto que os métodos e conceitos podem ser 
aplicado posteriormente em uma aplicação mais complexa.<br />
Primeiramente vamos fazer o require do autload do diretório vendor para termos acesso às classes das ferramentas que 
utilizaremos.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="k">require_once</span> <span class="s2">"./vendor/autoload.php"</span><span class="p">;</span>
</code></pre></div></div>

<p>As informações que iremos capturar são as críticas e notas dadas por usuários em um determinado filme em um site sobre 
cinema, primeiramente precisaremos fazer uma requisição para o link para pegar a página em formato texto(html) com o 
Guzzle.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="err">\</span><span class="nf">GuzzleHttp\Client</span><span class="p">();</span>

<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s2">"http://www.adorocinema.com/filmes/filme-141110/criticas/espectadores/"</span><span class="p">);</span>

<span class="nv">$html</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="nf">getBody</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getContents</span><span class="p">();</span>

<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$html</span><span class="p">);</span>
</code></pre></div></div>

<p>Primeiro criamos um Http Client para podermos fazer requests para uma página web, após isso utilizamos este objeto para 
realizar uma requisição do tipo <code class="language-plaintext highlighter-rouge">GET</code> para o link que queremos, o método <code class="language-plaintext highlighter-rouge">get</code> do  Client do Guzzle retorna uma 
<code class="language-plaintext highlighter-rouge">ResponseInterface</code> então podemos utilizar os métodos <code class="language-plaintext highlighter-rouge">getBody</code> e <code class="language-plaintext highlighter-rouge">getContents</code> para termos o html da página.<br />
Podemos testar entrando no diretório do projeto e executando o seguinte comando:<br />
<code class="language-plaintext highlighter-rouge">php webcrawler.php</code> ao final será apresentado o html da página.</p>

<p>Este html passamos na criação do Crawler, esta classe fornece métodos para manipulação do DOM html.</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$crawler</span> <span class="o">=</span> <span class="k">new</span> <span class="err">\</span><span class="nf">Symfony\Component\DomCrawler\Crawler</span><span class="p">(</span><span class="nv">$html</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<p>A partir desse ponto podemos utilizar os métodos do Symfony Crawler para percorrer os nós da página e capturar as 
informações necessárias.<br />
Como comentei anteriormente, iremos capturar as críticas e a nota dada por usuários em um determinado filme, primeiro 
temos que analisar a página, então vamos acessar o link utilizado no método get  do client http, vamos abrir a 
ferramenta de desenvolvedor do browser, navegando pelas tags podemos perceber que todas as informações que queremos 
estão dentro de várias divs com class <code class="language-plaintext highlighter-rouge">review-card-review-holder</code></p>

<div class="img-container">
    <img src="https://i.ibb.co/D5pmq73/exemple-html.png" />  
</div>

<p>Então usaremos o método <code class="language-plaintext highlighter-rouge">filter</code> para filtrar apenas essas divs que nós queremos, o <code class="language-plaintext highlighter-rouge">CSS Selector</code> que instalamos 
permite utilizarmos uma sintaxe similar ao jQuery para acessar determinado nó do DOM, podemos filtrar por qualquer 
atributo como classe, id, name ou qualquer outro.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$contentContainer</span> <span class="o">=</span> <span class="nv">$crawler</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="s1">'div[class="review-card-review-holder"]'</span><span class="p">);</span>
</code></pre></div></div>

<p>O método filter retorna um novo objeto <code class="language-plaintext highlighter-rouge">Crawler</code> contendo apenas os elementos correspondentes aquela query que passamos no 
<code class="language-plaintext highlighter-rouge">filter</code>, o site faz paginação mostrando apenas 10 comentários por páginas, para verificarmos se pegamos as dez divs 
podemos usar o método <code class="language-plaintext highlighter-rouge">count</code>.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$contentContainer</span><span class="o">-&gt;</span><span class="nb">count</span><span class="p">())</span> <span class="p">;</span> <span class="mi">10</span>
</code></pre></div></div>

<p><br /></p>

<p>Analisando novamente a estrutura da página vemos que a nota dada pelos usuários estão em tags <code class="language-plaintext highlighter-rouge">span</code> com 
class <code class="language-plaintext highlighter-rouge">stareval-note</code> dentro das divs que já filtramos e o texto da crítica está em divs com class <code class="language-plaintext highlighter-rouge">content-txt review-card-content</code>.</p>

<div class="img-container">
    <img src="https://i.ibb.co/9T100XG/exemple-html.png" />  
</div>

<p>Primeiro vamos capturar essas informações de uma maneira não muito legal para entendermos o que esta acontecendo, 
primeiramente vamos capturar as informações das notas.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$rates</span> <span class="o">=</span> <span class="nv">$contentContainer</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="s1">'span[class="stareval-note"]'</span><span class="p">);</span>
</code></pre></div></div>

<p>Assim podemos percorrer como um array e pegar as informações, aqui irei apenas imprimir na tela, mas poderia ser 
executado alguma funcionalidade para salvar no banco, processar essa informação ou qualquer outra ação.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">foreach</span> <span class="p">(</span><span class="nv">$rates</span> <span class="k">as</span> <span class="nv">$rate</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$rate</span><span class="o">-&gt;</span><span class="n">textContent</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Da mesma forma ocorre para o texto da crítica.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$texts</span> <span class="o">=</span> <span class="nv">$contentContainer</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="s1">'div[class="content-txt review-card-content"]'</span><span class="p">);</span>
</code></pre></div></div>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">foreach</span> <span class="p">(</span><span class="nv">$texts</span> <span class="k">as</span> <span class="nv">$text</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$text</span><span class="o">-&gt;</span><span class="n">textContent</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Dentro do foreach estamos manipulando objetos da classe <code class="language-plaintext highlighter-rouge">DOMElement</code> então utilizamos a propriedade <code class="language-plaintext highlighter-rouge">textContent</code> 
para pegarmos a informação necessária.<br />
Como podemos ver, as informações estão separadas e não ficou muito bom esse código, precisando executar um merge ou 
alguma outra forma para juntar o texto com sua respectiva nota, então vamos refatorar utilizando alguns métodos do 
Crawler do Symfony.</p>

<p><br /></p>

<p>Como vimos o método <code class="language-plaintext highlighter-rouge">filter</code> retorna um novo Crawler e esta classe contém o método <code class="language-plaintext highlighter-rouge">each</code> similar a um <code class="language-plaintext highlighter-rouge">map</code>, 
simplificando o conceito do método each é que ele permite executar uma determinada função em cada item de um conjunto 
retornando um novo conjunto com os elementos após a aplicação da função.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$data</span> <span class="o">=</span> <span class="nv">$crawler</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="s1">'div[class="review-card-review-holder"]'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nb">each</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$contentContainer</span><span class="p">)</span> <span class="p">{</span>
    <span class="cd">/** @var \Symfony\Component\DomCrawler\Crawler $contentContainer */</span>
    <span class="nv">$rate</span> <span class="o">=</span> <span class="nv">$contentContainer</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="s1">'span[class="stareval-note"]'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">text</span><span class="p">();</span>
    <span class="nv">$text</span> <span class="o">=</span> <span class="nv">$contentContainer</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="s1">'div[class="content-txt review-card-content"]'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">text</span><span class="p">();</span>

    <span class="k">return</span> <span class="p">[</span>
        <span class="s2">"rate"</span> <span class="o">=&gt;</span> <span class="nv">$rate</span><span class="p">,</span>
        <span class="s2">"text"</span> <span class="o">=&gt;</span> <span class="nv">$text</span>
    <span class="p">];</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Após executar o <code class="language-plaintext highlighter-rouge">filter</code> para recuperarmos os nós que contém as informações que queremos, executamos o método <code class="language-plaintext highlighter-rouge">each</code> 
passando uma função que será executada em cada um desses nós, dentro dessa função executamos um <code class="language-plaintext highlighter-rouge">filter</code> novamente para 
pegarmos o nó onde temos a nota e o texto e após utilizamos o método <code class="language-plaintext highlighter-rouge">text</code> para pegarmos efetivamente o conteúdo que 
precisamos, assim retornamos um array contendo o texto e sua respectiva nota, no final temos um array <code class="language-plaintext highlighter-rouge">$data</code> com a 
seguinte estrutura.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span>
    <span class="p">[</span>
        <span class="s2">"rate"</span> <span class="o">=&gt;</span> <span class="n">valor</span><span class="o">-</span><span class="n">nota</span>
        <span class="s2">"text"</span> <span class="o">=&gt;</span> <span class="n">texto</span>
    <span class="p">],</span>
    <span class="p">[</span>
        <span class="s2">"rate"</span> <span class="o">=&gt;</span> <span class="n">valor</span><span class="o">-</span><span class="n">nota</span>
        <span class="s2">"text"</span> <span class="o">=&gt;</span> <span class="n">texto</span>
    <span class="p">],</span>
    <span class="p">[</span>
        <span class="s2">"rate"</span> <span class="o">=&gt;</span> <span class="n">valor</span><span class="o">-</span><span class="n">nota</span>
        <span class="s2">"text"</span> <span class="o">=&gt;</span> <span class="n">texto</span>
    <span class="p">],</span>
    <span class="mf">......</span>
<span class="p">]</span>
</code></pre></div></div>

<p>Assim temos uma estrutura fácil de manipular contendo as informações necessárias.</p>

<p><br /></p>

<p>O código final ficou desta maneira.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="k">require_once</span> <span class="s2">"./vendor/autoload.php"</span><span class="p">;</span>

<span class="nv">$client</span> <span class="o">=</span> <span class="k">new</span> <span class="err">\</span><span class="nf">GuzzleHttp\Client</span><span class="p">();</span>

<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$client</span><span class="o">-&gt;</span><span class="nf">get</span><span class="p">(</span><span class="s2">"http://www.adorocinema.com/filmes/filme-141110/criticas/espectadores/"</span><span class="p">);</span>

<span class="nv">$html</span> <span class="o">=</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="nf">getBody</span><span class="p">()</span><span class="o">-&gt;</span><span class="nf">getContents</span><span class="p">();</span>


<span class="nv">$crawler</span> <span class="o">=</span> <span class="k">new</span> <span class="err">\</span><span class="nf">Symfony\Component\DomCrawler\Crawler</span><span class="p">(</span><span class="nv">$html</span><span class="p">);</span>


<span class="nv">$data</span> <span class="o">=</span> <span class="nv">$crawler</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="s1">'div[class="review-card-review-holder"]'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nb">each</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nv">$contentContainer</span><span class="p">)</span> <span class="p">{</span>
    <span class="cd">/** @var \Symfony\Component\DomCrawler\Crawler $contentContainer */</span>
    <span class="nv">$rate</span> <span class="o">=</span> <span class="nv">$contentContainer</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="s1">'span[class="stareval-note"]'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">text</span><span class="p">();</span>
    <span class="nv">$text</span> <span class="o">=</span> <span class="nv">$contentContainer</span><span class="o">-&gt;</span><span class="nf">filter</span><span class="p">(</span><span class="s1">'div[class="content-txt review-card-content"]'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">text</span><span class="p">();</span>

    <span class="k">return</span> <span class="p">[</span>
        <span class="s2">"rate"</span> <span class="o">=&gt;</span> <span class="nv">$rate</span><span class="p">,</span>
        <span class="s2">"text"</span> <span class="o">=&gt;</span> <span class="nv">$text</span>
    <span class="p">];</span>
<span class="p">});</span>


<span class="nb">var_dump</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<p>O componente DomCrawler do Symfony também contém classes especiais para captura e manipulação de links, imagens e 
formulários, além de permitir algumas querys mais complexas para percorrer o DOM html com
<a href="https://symfony.com/doc/current/components/dom_crawler.html#expression-evaluation">Expression Evaluation</a>, também permite capturar 
informações sobre os atributos das tags entre outras funcionalidades. É uma ferramenta que vale a pena dar uma olhada.</p>

<p><br /></p>

<h5 id="referências"><strong>Referências:</strong></h5>
<ul>
  <li>https://symfony.com/doc/current/components/dom_crawler.html</li>
  <li>https://developer.mozilla.org/pt-BR/docs/DOM/Referencia_do_DOM</li>
  <li>https://linux.ime.usp.br/~cef/mac499-06/monografias/andre/WebCrawler.html</li>
</ul>
:ET