I"gó<p><br /></p>

<p>Quem j√° estudou ou pesquisou por algoritmos provavelmente j√° ouviu falar 
em Estrutura de Dados (ED), s√£o modos gen√©ricos de armazenar informa√ß√µes 
de forma eficiente ajudando a melhorar o desempenho e entendimento de um 
algoritmo. Tipos Abstratos de Dados (TAD), em um contexto de linguagem, 
denota um conjunto de dados e as opera√ß√µes poss√≠veis de serem realizadas 
sob esses dados, estrutura de dados √© uma forma concreta de um Tipo 
Abstrato de dados.</p>

<p><img src="https://cdn-images-1.medium.com/max/2000/1*oT0-Tqda8sGMdKH0SHPbOw.jpeg" alt="" /></p>
<div class="img-legend">Nate Grant em Unsplash</div>

<p><br /></p>

<h4 id="tipos-abstratos-de-dados"><strong>Tipos Abstratos de Dados</strong></h4>
<p>Temos alguns TADs j√° conhecidos e bastante utilizados como Fila, Pilha, 
Lista, √Årvore, etc, esses Tipos Abstratos de Dados podem ser 
divididos em dois grupos, lineares e n√£o lineares.</p>

<p>Os TDA‚Äôs lineares s√£o estruturas onde os dados s√£o arranjados 
sequencialmente, estes possuem opera√ß√µes de adicionar ou remover 
um item que podem seguir modos diferentes, vamos tomar como exemplo 
uma <code class="language-plaintext highlighter-rouge">Fila</code> e uma <code class="language-plaintext highlighter-rouge">Pilha</code>, vamos imaginar uma fila em um caixa de um 
restaurante, quando uma pessoa entra na fila ela se posiciona atr√°s de 
todas as outras pessoas, no final da fila, se uma outra pessoa chegar, 
ela entra atr√°s desta, e assim por diante, seguindo esta l√≥gica, as 
pessoas que estavam nas primeiras posi√ß√µes v√£o sendo atendidas e assim 
a fila vai ‚Äúandando‚Äù e os ‚Äúitens‚Äù v√£o sendo processados, esta forma de 
inserir e remover um item √© chamado de <strong>FIFO</strong> (First In, First Out), 
Primeiro a entrar, primeiro a sair.</p>

<div class="img-container">
    <img src="https://i.ibb.co/m9PtY1R/fila.png" />  
</div>

<p><br /></p>

<p>Agora imaginamos no mesmo restaurante algu√©m na cozinha lavando os pratos 
utilizados, a pessoa lava e coloca um sobre o outro ao lado da pia, 
assim vai formando-se uma pilha de pratos lavados, um em cima do outro, 
quando um prato √© limpo √© colocado no topo da pilha, caso precise ser 
utilizado um novo prato pra servir, como seria problem√°tico retirar o 
√∫ltimo prato l√° de baixo, podendo virar todos os outros, √© retirado um 
prato tamb√©m do topo da pilha, esta forma de inserir e remover itens 
√© chamado de <strong>LIFO</strong> (Last In, First Out), √∫ltimo a entrar, primeiro a 
sair, o √∫ltimo item colocado na pilha, no topo, quando for preciso 
utilizar, ser√° o primeiro a ser retirado.</p>

<div class="img-container">
    <img src="https://i.ibb.co/dkFpGzC/pilha.png" />  
</div>

<p><br /></p>

<p>Em rela√ß√£o aos TDA‚Äôs do tipo √°rvore existem diversos tipos, o que 
iremos ver √© uma Heap, que √© uma √°rvore bin√°ria balanceada.<br />
Uma √°rvore bin√°ria √© uma estrutura formada por <code class="language-plaintext highlighter-rouge">n√≥s</code> onde s√£o 
‚Äúguardados‚Äù os valores e cada <code class="language-plaintext highlighter-rouge">n√≥</code> pode ser ‚Äúligado‚Äù √† no m√°ximo dois 
<code class="language-plaintext highlighter-rouge">n√≥s</code> filhos, nesta estrutura os dados s√£o dispostos de forma 
hier√°rquica, o primeiro n√≥ da √°rvore √© chamado <code class="language-plaintext highlighter-rouge">raiz</code> da √°rvore, os 
√∫ltimos <code class="language-plaintext highlighter-rouge">n√≥s</code> s√£o chamados <code class="language-plaintext highlighter-rouge">n√≥s folhas</code>.<br />
Existem outros conceitos relacionados a √°rvores como grau, altura, 
percorrer uma √°rvore, entre outros, n√£o iremos entrar em detalhes aqui.</p>

<div class="img-container">
    <img src="https://i.ibb.co/cDQFxRk/arvore.png" />  
</div>

<p><br /></p>

<h4 id="spl"><strong>SPL</strong></h4>
<p>A maioria das linguagens de programa√ß√£o fornecem bibliotecas que 
implementam essas abstra√ß√µes, restando apenas usarmos. Desde a vers√£o 5 
o PHP tem <em>built in</em> a biblioteca Standard PHP Library (<strong>SPL</strong>). A SPL 
√© um conjunto de <em>interfaces</em> e classes que fornecem algumas solu√ß√µes de 
estrutura de dados pronta paras serem utilizadas, vamos ver o 
funcionamento de algumas delas.</p>

<p><br /></p>

<h5 id="fila-splqueue"><strong>Fila (SplQueue)</strong></h5>
<p>Esta estrutura, como o nome sugere, tem como comportamento o mesmo que 
uma fila do mundo real, cada item inserindo √© alocado atr√°s do √∫ltimo 
j√° existente, e quando executado uma opera√ß√£o de remover, √© retirado o 
primeiro item no momento da fila.<br />
Usando a <code class="language-plaintext highlighter-rouge">SplQueue</code> da SPL.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="nv">$queue</span> <span class="o">=</span> <span class="nf">SplQueue</span><span class="p">();</span>
    <span class="nv">$queue</span><span class="o">-&gt;</span><span class="nf">enqueue</span><span class="p">(</span><span class="s2">"pessoa 1"</span><span class="p">);</span>
    <span class="nv">$queue</span><span class="o">-&gt;</span><span class="nf">enqueue</span><span class="p">(</span><span class="s2">"pessoa 2"</span><span class="p">);</span>
    <span class="nv">$queue</span><span class="o">-&gt;</span><span class="nf">enqueue</span><span class="p">(</span><span class="s2">"pessoa 3"</span><span class="p">);</span>
    <span class="nv">$queue</span><span class="o">-&gt;</span><span class="nf">enqueue</span><span class="p">(</span><span class="s2">"pessoa 4"</span><span class="p">);</span>

</code></pre></div></div>

<p>No exemplo usamos a opera√ß√£o <code class="language-plaintext highlighter-rouge">enqueue</code> que ‚Äúenfileira‚Äù itens. Para 
remover um item usamos a opera√ß√£o <code class="language-plaintext highlighter-rouge">dequeue</code>.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="k">echo</span> <span class="nv">$queue</span><span class="o">-&gt;</span><span class="nf">dequeue</span><span class="p">();</span> <span class="c1">// Remove ‚Äúpessoa 1‚Äù</span>
    <span class="k">echo</span> <span class="nv">$queue</span><span class="o">-&gt;</span><span class="nf">dequeue</span><span class="p">();</span> <span class="c1">// Remove ‚Äúpessoa 2‚Äù</span>
</code></pre></div></div>
<p>Cada vez que executamos essa opera√ß√£o ele remove o item que est√° atualmente 
na primeira posi√ß√£o da fila.<br />
A Fila tamb√©m possui uma opera√ß√£o para verificar se est√° vazia ou n√£o.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="nv">$queue</span> <span class="o">=</span> <span class="nf">SplQueue</span><span class="p">();</span>
    <span class="k">echo</span> <span class="nv">$queue</span><span class="err">‚Üí</span><span class="nf">isEmpty</span><span class="p">();</span> <span class="c1">// true</span>
</code></pre></div></div>
<p><br /></p>

<h5 id="pilha-splstack"><strong>Pilha (SplStack)</strong></h5>
<p>Podemos imagina uma Pilha como um conjunto de itens um em cima do outro 
formando uma ‚Äúpilha‚Äù de itens. Usamos a <code class="language-plaintext highlighter-rouge">SplStack</code> para trabalhar 
com essa estrutura, uma Pilha possui duas opera√ß√µes b√°sicas, <code class="language-plaintext highlighter-rouge">push</code> para 
empilhar um item e <code class="language-plaintext highlighter-rouge">pop</code> para desempilhar um item.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="nv">$stack</span> <span class="o">=</span> <span class="nf">SplStack</span><span class="p">();</span>
    <span class="nv">$stack</span><span class="o">-&gt;</span><span class="nf">push</span><span class="p">(</span><span class="s2">"prato 1"</span><span class="p">);</span>
    <span class="nv">$stack</span><span class="o">-&gt;</span><span class="nf">push</span><span class="p">(</span><span class="s2">"prato 2"</span><span class="p">);</span>
    <span class="nv">$stack</span><span class="o">-&gt;</span><span class="nf">push</span><span class="p">(</span><span class="s2">"prato 3"</span><span class="p">);</span>
    <span class="nv">$stack</span><span class="o">-&gt;</span><span class="nf">push</span><span class="p">(</span><span class="s2">"prato 4"</span><span class="p">);</span>
</code></pre></div></div>

<p>Agora podemos observar o comportamento da Pilha, podemos imaginar 
visualmente a estrutura do exemplo da seguinte forma:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"prato 4"</span>
<span class="s2">"prato 3"</span>
<span class="s2">"prato 2"</span>
<span class="s2">"prato 1"</span>
</code></pre></div></div>
<p>Como vimos anteriormente, quando removemos um item de uma Pilha, 
√© removido o item que est√° atualmente no topo da estrutura.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="k">echo</span> <span class="nv">$stack</span><span class="o">-&gt;</span><span class="nf">pop</span><span class="p">();</span> <span class="c1">// Remove "prato 4"</span>
    <span class="k">echo</span> <span class="nv">$stack</span><span class="o">-&gt;</span><span class="nf">pop</span><span class="p">();</span> <span class="c1">// Remove "prato 3"</span>
</code></pre></div></div>

<p>Agora caso inserirmos mais itens na Pilha, observando o comportamento 
descrito anteriormente.</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="nv">$stack</span><span class="o">-&gt;</span><span class="nf">push</span><span class="p">(</span><span class="s2">"prato 6"</span><span class="p">);</span>
    <span class="nv">$stack</span><span class="o">-&gt;</span><span class="nf">push</span><span class="p">(</span><span class="s2">"prato 7"</span><span class="p">);</span>
</code></pre></div></div>
<p>Seguindo o comportamento normal de uma Pilha de inserir um item sempre 
no topo, teremos os seguintes dados:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"prato 7"</span>
<span class="s2">"prato 6"</span>
<span class="s2">"prato 2"</span>
<span class="s2">"prato 1"</span>
</code></pre></div></div>

<p>A Pilha tamb√©m possui a opera√ß√£o para verificar se existe est√° vazia.</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="nv">$stack</span> <span class="o">=</span> <span class="nf">SplStack</span><span class="p">();</span>
    <span class="k">echo</span> <span class="nv">$stack</span><span class="o">-&gt;</span><span class="nf">isEmpty</span><span class="p">();</span> <span class="c1">// true</span>
</code></pre></div></div>

<p><br /></p>

<h5 id="deque"><strong>Deque</strong></h5>
<p>A SPL possui a SplDoublyLinkedList, esta estrutura implementa um tipo 
de Lista, a diferen√ßa √© que a SplDoublyLinkedList  permite a inser√ß√£o ou 
remo√ß√£o de dados em ambos os lados, sendo ent√£o um <code class="language-plaintext highlighter-rouge">Deque</code>, portando 
podemos inserir ou remover um item tanto no que seria o in√≠cio da lista 
quanto no que seria o final da lista.</p>

<p>A SplDoublyLinkedList possui quatro opera√ß√µes b√°sicas, inserir no 
in√≠cio da lista, inserir no final da lista, remover do in√≠cio da lista 
e remover do final da lista.</p>

<p>A opera√ß√£o <code class="language-plaintext highlighter-rouge">unshift</code> enfileira um item no in√≠cio da lista.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="nv">$doublyLinkedList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SplDoublyLinkedList</span><span class="p">();</span>
    <span class="n">doublyLinkedList</span><span class="o">-&gt;</span><span class="nf">unshift</span><span class="p">(</span><span class="s2">"Arroz"</span><span class="p">);</span>
    <span class="n">doublyLinkedList</span><span class="o">-&gt;</span><span class="nf">unshift</span><span class="p">(</span><span class="s2">"Piment√£o"</span><span class="p">);</span>
    <span class="n">doublyLinkedList</span><span class="o">-&gt;</span><span class="nf">unshift</span><span class="p">(</span><span class="s2">"Cenoura"</span><span class="p">);</span>
    <span class="n">doublyLinkedList</span><span class="o">-&gt;</span><span class="nf">unshift</span><span class="p">(</span><span class="s2">"Tomate"</span><span class="p">);</span>
</code></pre></div></div>

<p>Mesmo que coloquemos os itens em uma ordem inversa, quando executado a 
opera√ß√£o com um item, ele √© colocado sempre no in√≠cio da lista. No 
momento esse exemplo tem a seguinte estrutura:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Tomate</span>
<span class="nc">Cenoura</span>
<span class="nc">Piment√£o</span>
<span class="nc">Arroz</span>
</code></pre></div></div>

<p>A opera√ß√£o <code class="language-plaintext highlighter-rouge">push</code> enfileira um item no final da lista, vamos pegar a 
lista anterior e adicionar um item ao final dela.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="n">doublyLinkedList</span><span class="o">-&gt;</span><span class="nf">push</span><span class="p">(</span><span class="s2">"Feij√£o"</span><span class="p">);</span>
</code></pre></div></div>

<p>Agora nossa lista est√° completa:</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Tomate</span>
<span class="nc">Cenoura</span>
<span class="nc">Piment√£o</span>
<span class="nc">Arroz</span>
<span class="nc">Feij√£o</span> <span class="c1">// Item inserido no final da lista com push</span>
</code></pre></div></div>

<p>Para desenfileirar temos duas opera√ß√µes, <code class="language-plaintext highlighter-rouge">shift</code> para remover do 
in√≠cio da lista e <code class="language-plaintext highlighter-rouge">pop</code> para remover do final da lista.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="n">doublyLinkedList</span><span class="err">‚Üí</span><span class="nf">shift</span><span class="p">();</span> <span class="c1">// Remove Tomate</span>
    <span class="n">doublyLinkedList</span><span class="err">‚Üí</span><span class="nf">shift</span><span class="p">();</span> <span class="c1">// Remove Cenoura</span>
    
    <span class="n">doublyLinkedList</span><span class="err">‚Üí</span><span class="nf">pop</span><span class="p">();</span> <span class="c1">// Remove Feij√£o</span>
    <span class="n">doublyLinkedList</span><span class="err">‚Üí</span><span class="nf">pop</span><span class="p">();</span> <span class="c1">// Remove Arroz</span>
</code></pre></div></div>

<p><br /></p>

<h5 id="heap-√°rvore-bin√°ria"><strong>Heap (√Årvore Bin√°ria)</strong></h5>

<p>A classe SplHeap da SPL √© uma classe abstrata que implementa uma s√©rie 
de funcionalidades de uma Heap, sendo uma classe abstrata para usar uma 
estrutura Heap da SPL √© preciso usar as classes concretas <code class="language-plaintext highlighter-rouge">SplMaxHeap</code> 
e <code class="language-plaintext highlighter-rouge">SplMinHeap</code>. Para inserir um item usamos a opera√ß√£o <code class="language-plaintext highlighter-rouge">insert</code>.</p>

<h5 id="splmaxheap"><strong>SplMaxHeap</strong></h5>
<p>A SplMaxHeap para definir a posi√ß√£o do valor a ser inserido na √°rvore 
ela mant√©m sempre o maior valor como raiz da √°rvore, assim apresentando 
os valores com uma ordena√ß√£o decrescente.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="nv">$tree</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SplMaxHeap</span><span class="p">();</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">27</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">9</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">21</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">23</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</code></pre></div></div>

<p>Vamos ver os dados.</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$tree</span> <span class="k">as</span> <span class="nv">$item</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nv">$item</span> <span class="mf">.</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>A sa√≠da apresentada ser√° <code class="language-plaintext highlighter-rouge">27, 23, 21, 15, 9, 6, 3, 1</code>.</p>

<h5 id="splminheap"><strong>SplMinHeap</strong></h5>
<p>A <code class="language-plaintext highlighter-rouge">SplMinHeap</code> ao contr√°rio da <code class="language-plaintext highlighter-rouge">SplMaxHeap</code> mant√©m o menor valor 
como raiz da √Årvore, apresentando os valores com ordena√ß√£o crescente.</p>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="nv">$tree</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SplMinHeap</span><span class="p">();</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">27</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">9</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">21</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">23</span><span class="p">);</span>
    <span class="nv">$tree</span><span class="o">-&gt;</span><span class="nf">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</code></pre></div></div>
<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$tree</span> <span class="k">as</span> <span class="nv">$item</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nv">$item</span> <span class="mf">.</span> <span class="kc">PHP_EOL</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>A sa√≠da apresentada ser√° <code class="language-plaintext highlighter-rouge">1, 3, 6, 9, 15, 21, 23, 27</code>.</p>

<p><br /></p>

<p>Sendo a <code class="language-plaintext highlighter-rouge">SplHeap</code> uma classe abstrata podemos criar nossa pr√≥pria 
classe concreta extendendo a <code class="language-plaintext highlighter-rouge">SplHeap</code> e implementando seu m√©todo 
<code class="language-plaintext highlighter-rouge">compare</code> que √© utilizado para definir a posi√ß√£o do valor a ser 
inserido na √°rvore.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="kd">class</span> <span class="nc">Person</span>
<span class="p">{</span>
	<span class="k">private</span> <span class="nv">$age</span><span class="p">;</span>

	<span class="k">public</span> <span class="k">function</span> <span class="n">__constructor</span><span class="p">(</span><span class="kt">int</span> <span class="nv">$age</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="nv">$this</span><span class="o">-&gt;</span><span class="n">age</span> <span class="o">=</span> <span class="nv">$age</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">public</span> <span class="k">function</span> <span class="n">getAge</span><span class="p">():</span> <span class="kt">int</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">age</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">PersonHeap</span> <span class="kd">extends</span> <span class="nc">SplHeap</span>
<span class="p">{</span>
	<span class="k">public</span> <span class="k">function</span> <span class="n">compare</span><span class="p">(</span><span class="nv">$personX</span><span class="p">,</span> <span class="nv">$personY</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="nv">$personX</span><span class="o">-&gt;</span><span class="nf">getAge</span><span class="p">()</span> <span class="o">&lt;=&gt;</span> <span class="nv">$personY</span><span class="err">‚Üí</span><span class="nf">getAge</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Criamos uma classe <code class="language-plaintext highlighter-rouge">Person</code> para representar algumas entidades 
<code class="language-plaintext highlighter-rouge">pessoas</code> que iremos inserir na estrutura, tamb√©m criamos nossa classe 
<code class="language-plaintext highlighter-rouge">PersonHeap</code> extendendo a <code class="language-plaintext highlighter-rouge">SplHeap</code>, notem o m√©todo <code class="language-plaintext highlighter-rouge">compare</code>, 
ele deve retornar <code class="language-plaintext highlighter-rouge">-1</code> caso o primeiro valor seja menor que o 
segundo, <code class="language-plaintext highlighter-rouge">1</code> caso contr√°rio e <code class="language-plaintext highlighter-rouge">0</code> se ambos forem iguais.<br />
O segundo par√¢metro do m√©todo <code class="language-plaintext highlighter-rouge">compare</code> √© o valor a ser inserido no 
momento, no exemplo anterior a estrutura apresentar√° os valores em 
ondem decrescente, para mostrar em ordem crescente basta alterar a 
ordem de compara√ß√£o no m√©todo <code class="language-plaintext highlighter-rouge">compare</code>, ficando da seguinte maneira:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
	<span class="k">public</span> <span class="k">function</span> <span class="n">compare</span><span class="p">(</span><span class="nv">$personX</span><span class="p">,</span> <span class="nv">$personY</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">return</span> <span class="nv">$personY</span><span class="o">-&gt;</span><span class="nf">getAge</span><span class="p">()</span> <span class="o">&lt;=&gt;</span> <span class="nv">$personX</span><span class="o">-&gt;</span><span class="nf">getAge</span><span class="p">();</span>
	<span class="p">}</span>
</code></pre></div></div>
<p>Assim quando formos percorrer os valores, ser√° em ordem crescente.</p>

<p><br /></p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="nv">$person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>
    <span class="nv">$person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    <span class="nv">$person3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="mi">26</span><span class="p">);</span>
    <span class="nv">$person4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="mi">39</span><span class="p">);</span>
    <span class="nv">$person5</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
    
    <span class="nv">$personHeap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PersonHeap</span><span class="p">();</span>
    
    <span class="nv">$personHeap</span><span class="err">‚Üí</span><span class="nf">insert</span><span class="p">(</span><span class="nv">$person1</span><span class="p">);</span>
    <span class="nv">$personHeap</span><span class="err">‚Üí</span><span class="nf">insert</span><span class="p">(</span><span class="nv">$person2</span><span class="p">);</span>
    <span class="nv">$personHeap</span><span class="err">‚Üí</span><span class="nf">insert</span><span class="p">(</span><span class="nv">$person3</span><span class="p">);</span>
    <span class="nv">$personHeap</span><span class="err">‚Üí</span><span class="nf">insert</span><span class="p">(</span><span class="nv">$person4</span><span class="p">);</span>
    <span class="nv">$personHeap</span><span class="err">‚Üí</span><span class="nf">insert</span><span class="p">(</span><span class="nv">$person5</span><span class="p">);</span>
    
    
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$personHeap</span> <span class="k">as</span> <span class="nv">$person</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nv">$person</span><span class="o">-&gt;</span><span class="nf">getAge</span><span class="p">();</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>Seguindo o primeiro exemplo, de forma descendente, a sa√≠da ser√° <code class="language-plaintext highlighter-rouge">39, 26, 15, 5, 3</code>.</p>

<p>Tamb√©m √© poss√≠vel verificar se a estrutura est√° vazia.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="nv">$personHeap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PersonHeap</span><span class="p">();</span>
    <span class="nv">$personHeap</span><span class="o">-&gt;</span><span class="nf">isEmpty</span><span class="p">();</span> <span class="c1">//true</span>
</code></pre></div></div>

<p><br /></p>

<h5 id="splobjectstorage"><strong>SplObjectStorage</strong></h5>
<p>A SplObjectStorage fornece um modelo de dicion√°rio, onde recebe um objeto 
e cria um hash do mesmo para fazer refer√™ncia a este objeto internamente, 
permite apenas valores √∫nicos e trabalha bem com grandes quantidades 
de objetos.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="kd">class</span> <span class="nc">Person</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="nv">$name</span><span class="p">;</span>
    
        <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">(</span><span class="kt">string</span> <span class="nv">$name</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="k">public</span> <span class="k">function</span> <span class="n">getName</span><span class="p">():</span> <span class="kt">string</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nv">$person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="s2">"joao"</span><span class="p">);</span>
    <span class="nv">$person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="s2">"carlos"</span><span class="p">);</span>
    <span class="nv">$person3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="s2">"jose"</span><span class="p">);</span>
    <span class="nv">$person4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="s2">"maria"</span><span class="p">);</span>
    <span class="nv">$person5</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="p">(</span><span class="s2">"julieta"</span><span class="p">);</span>
</code></pre></div></div>

<p>Criamos uma classe <code class="language-plaintext highlighter-rouge">Person</code> e algumas inst√¢ncias dessa classe, para 
inserir um objeto na estrutura usamos a opera√ß√£o <code class="language-plaintext highlighter-rouge">attach</code>.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    
    <span class="nv">$splObjectStorage</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SplObjectStorage</span><span class="p">();</span>
    
    <span class="nv">$splObjectStorage</span><span class="o">-&gt;</span><span class="nf">attach</span><span class="p">(</span><span class="nv">$person1</span><span class="p">);</span>
    <span class="nv">$splObjectStorage</span><span class="o">-&gt;</span><span class="nf">attach</span><span class="p">(</span><span class="nv">$person2</span><span class="p">);</span>
    <span class="nv">$splObjectStorage</span><span class="o">-&gt;</span><span class="nf">attach</span><span class="p">(</span><span class="nv">$person3</span><span class="p">);</span>
    <span class="nv">$splObjectStorage</span><span class="o">-&gt;</span><span class="nf">attach</span><span class="p">(</span><span class="nv">$person4</span><span class="p">);</span>
    <span class="nv">$splObjectStorage</span><span class="o">-&gt;</span><span class="nf">attach</span><span class="p">(</span><span class="nv">$person5</span><span class="p">);</span>
</code></pre></div></div>

<p>Temos algumas opera√ß√µes interessantes, para verificar a quantidade de 
itens e se a estrutura cont√©m um determinado objeto.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    
    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$splObjectStorage</span><span class="o">-&gt;</span><span class="nb">count</span><span class="p">());</span> <span class="c1">// Retorna a quantidade de itens, no exemplo 5</span>
    
    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$splObjectStorage</span><span class="o">-&gt;</span><span class="nf">contains</span><span class="p">(</span><span class="nv">$person1</span><span class="p">));</span> <span class="c1">// retorna true se cont√©m um determinado objeto</span>
</code></pre></div></div>

<p>Usamos <code class="language-plaintext highlighter-rouge">detach</code> para remover um determinado objeto.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    
    <span class="nv">$splObjectStorage</span><span class="o">-&gt;</span><span class="nf">detach</span><span class="p">(</span><span class="nv">$person1</span><span class="p">);</span>
    
    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$splObjectStorage</span><span class="o">-&gt;</span><span class="nb">count</span><span class="p">());</span> <span class="c1">// 4</span>
</code></pre></div></div>

<p><br /></p>

<h5 id="splfixedarray"><strong>SplFixedArray</strong></h5>
<p>A SPL tamb√©m cont√©m uma classe chamada SplFixedArray que implementa 
algumas funcionalidades de arrays, algumas diferen√ßas entre a 
SplFixedArray e o array normal do PHP √© que o SplFixedArray √© definido 
um tamanho fixo, permitido alterar posteriormente, e suporta apenas 
√≠ndice num√©rico inteiro.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

    <span class="nv">$fixedArray</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SplFixedArray</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    
    <span class="nv">$fixedArray</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="nv">$fixedArray</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    
    <span class="nv">$fixedArray</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span> <span class="c1">// PHP Fatal error: .....</span>
</code></pre></div></div>

<p>Podemos alterar o tamanho do array.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="nv">$fixedArray</span><span class="o">-&gt;</span><span class="nf">setSize</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    
    <span class="nv">$fixedArray</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
    <span class="nv">$fixedArray</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
    <span class="nv">$fixedArray</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
</code></pre></div></div>

<p>√â poss√≠vel tamb√©m criar uma SplFixedArray a partir de um array comum.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
    <span class="nv">$arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">40</span><span class="p">];</span>

    <span class="nv">$fixedArray</span> <span class="o">=</span> <span class="nc">SplFixedArray</span><span class="o">::</span><span class="nf">fromArray</span><span class="p">(</span><span class="nv">$arr</span><span class="p">);</span>
    
    <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$fixedArray</span><span class="p">);</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="conclus√£o"><strong>Conclus√£o</strong></h4>
<p>Como √© bem pouco comentado a ideia √© mostrar que existe tamb√©m a 
possibilidade de usarmos estrutura de dados em PHP e com a facilidade que 
temos j√° abstra√≠do v√°rias estruturas com a SPL facilitando o uso, n√£o 
entrei em detalhes muito a fundo tanto das estruturas quanto de 
algoritmos, quem for pesquisar mais sobre vai ver que estrutura de dados 
e algoritmos est√£o interligados e tem bastante assunto te√≥rico sobre. 
Aprender sobre estrutura de dados ajuda tamb√©m a modelagem de software 
melhorando quest√µes de algoritmos e mesmo entendimento de c√≥digo de software 
entre outras melhorias que o aprendizado pode trazer.<br />
Outro link interessante sobre estrutura de dados em PHP que vale a pena 
dar uma olhada: https://medium.com/@rtheunissen/efficient-data-structures-for-php-7-9dda7af674cd</p>

<p><br /></p>

<h5 id="refer√™ncias"><strong>Refer√™ncias:</strong></h5>
<ul>
  <li>http://php.net/manual/pt_BR/spl.datastructures.php</li>
  <li>livro PHP 7 Data Structures and Algorithms: Implement linked lists, stacks, and queues using PHP</li>
  <li>https://www.youtube.com/watch?v=8tXgHtuj2Ko</li>
</ul>
:ET