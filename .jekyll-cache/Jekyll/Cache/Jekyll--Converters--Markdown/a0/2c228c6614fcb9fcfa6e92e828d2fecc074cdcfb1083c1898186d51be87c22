I"ã<p>Quando trabalhava com projetos de estruturas met√°lica automatizei algumas tarefas usando uma forma de script interno do AutoCAD chamado AutoLISP, mas s√≥ funciona no ambiente do software, limitando assim, sua utiliza√ß√£o para algo mais geral, algum tempo atr√°s me deparei com Clojure, percebi que compartilhavam da mesma sintaxe e que existiam grandes empresas como o Nubank que a utilizam e resolvi me aprofundar um pouco mais, segue uma pequena introdu√ß√£o para iniciarmos conhecendo um pouco mais sobre essa nova linguagem.</p>

<p><img src="https://cdn-images-1.medium.com/max/1371/1*6h-IqXpvLbQemIRedaCrMg.png" alt="clojure logo" /></p>

<p>Clojure √© uma linguagem de programa√ß√£o din√¢mica, de prop√≥sito geral com √™nfase em programa√ß√£o funcional criada por Rich Hickey. Clojure roda sob a JVM (m√°quina virtual do Java), compila para bytecode como o Java faz, ainda existe a possibilidade de compilar para a CLR (plataforma .NET) e
ClojureScript que compila para Javascript.
A linguagem possui total interoperabilidade com o Java, isso quer dizer que n√£o √© necess√°rio reescrever todo o sistema existente em Java para Clojure, √© poss√≠vel invocar c√≥digo Java diretamente no c√≥digo Clojure.</p>

<p>Clojure √© um dialeto Lisp, umas das linguagens de programa√ß√£o mais antigas.
Clojure √© homoiconic, quer dizer que ela trata o proprio c√≥digo como dado, sua sintaxe √© baseada em S-Expressions (simbolic expression), o c√≥digo √© parseado como uma estrutura de dados pelo interpretador e ap√≥s compilada
para execu√ß√£o.</p>

<blockquote>
  <p>Clojure √© um dialeto da linguagem Lisp, e compartilha com o Lisp a filosofia de c√≥digo-como-dados e um poderoso sistema de macros. Clojure √© predominantemente uma linguagem funcional e possui um rico conjunto de estruturas de dados imut√°veis e persistentes. Quando o estado mut√°vel √© necess√°rio, Clojure oferece um sistema de mem√≥ria transacional de software e um sistema de agente reativo que garante projetos limpos, corretos e multithread. [Rich Hickey‚Ää‚Äî‚Äätradu√ß√£o livre]</p>
</blockquote>

<p>Como vimos, Clojure √© uma linguagem funcional. O paradigma funcional enfatiza a avalia√ß√£o de fun√ß√µes (como avalia√ß√£o de fun√ß√µes matem√°ticas) e evita estado, diferentemente da programa√ß√£o imperativa por exemplo, que incentiva a altera√ß√£o de estados, no paradigma funcional a unidade b√°sica
do c√≥digo √© a fun√ß√£o, diferente do paradigma OOP onde podemos dizer que a unidade b√°sica s√£o os objetos.
Algumas outras caracter√≠sticas do paradigma funcional e consequentemente de Clojure s√£o:</p>

<ul>
  <li><strong>Imutabilidade</strong>: Evita altera√ß√£o de estado, n√£o ‚Äúexiste‚Äù vari√°vel;</li>
  <li><strong>High-Order function</strong>: Fun√ß√µes que aceitam outras fun√ß√µes como par√¢metros e/ou retornam fun√ß√µes como resultado;</li>
  <li><strong>First-Class Functions</strong>: Fun√ß√µes podem ser usada como valores, atribu√≠das a uma vari√°vel;</li>
</ul>

<p>Como faz parte da fam√≠lia de dialetos da linguagem Lisp, trazendo muitas de suas caracter√≠sticas, temos que mudar a forma de pensar ao programar em Clojure, por utilizarmos uma sintaxe diferente do qual estamos acostumados na maioria das linguagens mais populares, e principalmente por entrarmos no mundo do paradigma de programa√ß√£o funcional que j√° √© mat√©ria de estudos a um longo tempo.</p>

<p>Em breve mais relatos sobre essa jornada de aprendizado dessa nova tecnologia, vlw! :)</p>
:ET